/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
TreeLinkNode *findnext(TreeLinkNode * node)
{
    
    TreeLinkNode * temp = node->next;
    while(temp != NULL)
    {
        if(temp->left)
        {
            return temp->left;
        }
        if(temp->right)
        {
            return temp->right;
        }
        temp= temp->next;
    }
    return NULL;
}

void fxn(TreeLinkNode *p)
{
    
    if(p == NULL)
    {
        return ;
    }
    p->next = NULL;
    
    while(p)
    {
        TreeLinkNode *q = p;
        //TreeLinkNode *temp = q;
        while(q)
        {
            if(q->left)
            {
                if(q->right)
                {
                    q->left->next = q->right;
                }
                else
                {
                    q->left->next = findnext(q);
                }
            }
            if(q->right)
            {
                if(q->next)
                {
                    q->right->next = findnext(q);
                }
                
            }
            q = q->next;
            
        }
        if(p->left)
            p = p->left;
        else if(p->right)
            p=p->right;
        else
            p = findnext(p);
    }
}



void Solution::connect(TreeLinkNode* root) {
    TreeLinkNode* node = root;
    fxn(node);
    
    return ;
}
